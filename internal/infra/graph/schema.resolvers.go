package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"

	"github.com/dpcamargo/fullcycle-clean-architecture/internal/infra/graph/model"
	"github.com/dpcamargo/fullcycle-clean-architecture/internal/usecase"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input *model.OrderInput) (*model.Order, error) {
	order := usecase.OrderInputDTO{
		ID:    input.ID,
		Price: input.Price,
		Tax:   input.Tax,
	}
	orderCreated, err := r.OrderUseCase.CreateOrder(order)
	if err != nil {
		return nil, err
	}
	res := &model.Order{
		ID:         orderCreated.ID,
		Price:      orderCreated.Price,
		Tax:        orderCreated.Tax,
		FinalPrice: orderCreated.FinalPrice,
	}

	return res, nil
}

// GetOrder is the resolver for the getOrder field.
func (r *queryResolver) GetOrder(ctx context.Context, id int) (*model.Order, error) {
	order, err := r.OrderUseCase.GetOrder(id)
	if err != nil {
		return nil, err
	}
	res := &model.Order{
		ID:         order.ID,
		Price:      order.Price,
		Tax:        order.Tax,
		FinalPrice: order.FinalPrice,
	}

	return res, nil
}

// GetList is the resolver for the getList field.
func (r *queryResolver) GetList(ctx context.Context) ([]*model.Order, error) {
	orders, err := r.OrderUseCase.ListOrders()
	if err != nil {
		return nil, err
	}
	var res []*model.Order
	for _, order := range orders {
		tempOrder := model.Order{
			ID:         order.ID,
			Price:      order.Price,
			Tax:        order.Tax,
			FinalPrice: order.FinalPrice,
		}
		res = append(res, &tempOrder)
	}

	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
